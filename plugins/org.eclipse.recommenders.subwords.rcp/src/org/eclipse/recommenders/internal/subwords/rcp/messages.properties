PREFPAGE_TITLE_SUBWORDS=Subwords
PREFPAGE_DESCRIPTION_SUBWORDS_PREFIX_LENGTH=JDT\u2019s Java Proposals require you to search for proposals by prefix match. \
 Subwords completion relaxes this constraint; you can search for proposals using arbitrary subwords matches. \
 This relaxation, however, may reduce content assist performance especially when searching for types or constructors. \
 For these kinds of proposals you can thus specify a minimum prefix length below.
PREFPAGE_LABEL_PREFIX_LENGTH=Minimum prefix length for types/constructors:
PREFPAGE_TOOLTIP_PREFIX_LENGTH=A value of \u20182\u2019 means that for a prefix like \u2018Str\u2019, subwords completion will propose\n\
 all types starting with \u2018St\u2019 that also contain a subword starting with \u2018r\u2019.\n\n\
 You may tweak this setting if you experience performance issues during content\n\
 assist. A large minimum prefix will make subwords completion behave like JDT\u2019s\n\
 Java Proposals for types and constructors.

PROPOSAL_LABEL_ENABLE_SUBWORDS_COMPLETION=Enable subwords completion?
PROPOSAL_TOOLTIP_ENABLE_SUBWORDS_COMPLETION=Subwords completion allows you to search for subword matches rather than just prefix matches in content assist. \
 If you want to enable subwords completion, click <a href="{2}">here</a> or simply press Return. \
 You can configure subwords completion in the <a href="{1}">{0}</a> preferences.\n\n\
 To learn more about subwords completion, please consult the <a href="{3}">manual</a>.
