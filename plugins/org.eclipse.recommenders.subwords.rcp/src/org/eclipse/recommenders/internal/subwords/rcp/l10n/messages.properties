PREFPAGE_TITLE_SUBWORDS=Subwords
PREFPAGE_DESCRIPTION_SUBWORDS_PREFIX_LENGTH=JDT\u2019s Java Proposals require you to search for proposals by prefix match. \
 Subwords completion relaxes this constraint; you can search for proposals using arbitrary subwords matches. \
 This relaxation, however, may reduce content assist performance, especially when searching for types or constructors. \
 Thus, for these kinds of proposals you can specify a minimum prefix length below.
PREFPAGE_LABEL_PREFIX_LENGTH=Minimum prefix length for types/constructors:
PREFPAGE_TOOLTIP_PREFIX_LENGTH=A value of \u20182\u2019 means that for a prefix like \u2018Str\u2019, subwords completion will propose\n\
 all types starting with \u2018St\u2019 which also contain a subword starting with \u2018r\u2019.\n\n\
 You may tweak this setting if you experience performance issues during content\n\
 assist. A large minimum prefix will make subwords completion behave like JDT\u2019s\n\
 Java Proposals for types and constructors.

LOG_ERROR_EXCEPTION_DURING_CODE_COMPLETION=Exception during code completion
LOG_ERROR_UNEXPECTED_FALLTHROUGH=Found uncovered lazy completion proposal of kind {0} (type \u2018{1}\u2019). \
 Please file a bug for the Code Recommenders project: https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Recommenders
LOG_ERROR_COMPLETION_CONTEXT_NOT_COLLECTED=Subwords could not be initialized because the completion context for compilation unit \u2018{0}\u2019 could not be collected. \
 Please provide steps to reproduce at https://bugs.eclipse.org/bugs/show_bug.cgi?id=459755
